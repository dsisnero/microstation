#!/usr/bin/env ruby
require_relative '../lib/microstation'

# app = Microstation::App.new
# drawing = app.current_drawing if app.has_current_drawing?
# drawing.scan_text do |t|
#   puts t if t.to_s =~ /{/
# end

module Faa

  module Templates

:0
    class App

      attr_reader :racks, :lid, :factype

      def initialize(lid: nil, factype:nil)
        @lid = lid || 'LID'
        @factype = factype || 'FACTYPE'
        @racks = []
      end

      def add_rco_rack(name: nil)
        rack = Rco::Rack.new(name):
        yield rack if block_given?
        racks << rack
        rack 
      end

      def dry_run(lid: @lid, factype: @factype, starting_number: 1,dir: nil)
        accum = { result: [], next_number: nil}
        result =racks.each_with_object(accum) do |r, o|
          result, next_number = r.dry_run(lid: lid, factype: factype,ending_number: o[:next_number],  starting_number: starting_number )
          o[:result].concat(result)
          o[:next_number] = next_number
          o
        end
        result[:result]
      end

      def run_bak(lid: @lid, factype: @factype, starting_number: 1, dir: Pathname.getwd)
        changes = dry_run(lid: lid, factype: factype, starting_number: starting_number, dir: dir)
        return if changes.size == 0
        Microstation.run do |app|
          changes.each do |change|
            app.change_drawing(change[:template], change[:new_name]) do |drawing| 
              drawing.change_template_text(change[:updates])
            end
          end
        end
      end

      def run2(lid: @lid, factype: @factype, starting_number: 1, dir: Pathname.getwd)
        changes = dry_run(lid: lid, factype: factype, starting_number: starting_number, dir: dir)
        return if changes.size == 0
       require 'pry'; binding.pry 
        Microstation.run(visible: true) do |app|
          changes.each do |change| 
            app.change_drawing(change[:template], name: change[:new_name], output_dir: dir ) do |drawing| 
              drawing.change_template_text(change[:updates])
            end
          end
        end
      end

      def run(lid: @lid, factype: @factype, starting_number: 1, dir: Pathname.getwd)
        changes = dry_run(lid: lid, factype: factype, starting_number: starting_number, dir: dir)
        return if changes.size == 0
        require 'pry'; binding.pry 
        Microstation.run(visible: true) do |app|
          changes.each do |change| 
            app.render_template(change[:template], name: change[:new_name], output_dir: dir, locals: change[:updates])
          end
        end
      end

    end

    module Rco

      DIR = ::Microstation::TEMPLATES_PATH + 'rco'


      class Rack

        DRAWINGS = (1..3).map{ |n| DIR + "t#{n}.dgn" }
        CHANNEL_TO_DWG = { 1 => DIR + 't1.dgn',
                           2 => DIR + 't2.dgn',
                         }

        attr_reader :change_steps

        attr_accessor :telco1_tx_drop, :telco1_rx_drop, :telco2_tx_drop, :telco2_rx_drop, :name


        def initialize(name = nil, &block)
          @name = name
          @change_steps  = {} 
          instance_eval(&block) if block_given?
        end

        def add_channel(freq,number)
          add_transmitter(freq,number)
          add_receiver(freq, number)
        end

        def channel_to_radio_number(chan)
          number_start = case chan
                         when 1
                           1
                         when 2
                           3
                         when 3
                           5
                         when 4
                           7
                         end
        end

        def channel_to_drawing(chan)
          case chan
          when 1
            DIR + 't1.dgn'
          when 2
            DIR + 't2.dgn'
          end
          
        end
        def add_radio( freq, number: 1, type: :tx, func: main)
          result = []
          string_type = case type
                        when :tx, 'transmitter', 'tx'
                          'TRANSMITTER'
                        when :rx, 'receiver', 'rx'
                          'RECEIVER'
                        else
                          raise
                        end
          string_func = case func
                        when :main, /\bmain\b/
                          'MAIN'
                        when :stby, /\bstby\b/i, /\bstandby\b/i
                          'STBY'
                        end

          result << "#{string_type}#{number}"
          result <<  "#{freq} MHz #{string_func}"
          result <<  "CM-300 V2"
          result.join("\n")
        end

        def add_channel(freq:, channel: 1)
          change_steps[channel]  = add_channel_changes(freq, channel)
        end

        def add_channel_changes(freq, ch)
          changes = {}
          changes[:channel] = ch
          changes[:updates] = text_for_freq_and_channel(freq,ch)
        end

        def text_for_freq_and_channel(freq,ch)
          number_start = channel_to_radio_number(ch)
          { 'tx1' => add_radio(freq, number: number_start, type: :tx, func: :main),
            'rx1' => add_radio(freq, number: number_start, type: :rx, func: :main),
            'tx2' => add_radio( freq, number: number_start + 1, type: :tx, func: :stby),
            'rx2' => add_radio( freq, number: number_start + 1, type: :rx, func: :stby),
          }
        end


        def dry_run(lid: , factype: , starting_number: 1,  ending_number: nil)
          starting_number = ending_number || starting_number
          results = []
          DRAWINGS.each.with_index(1) do |drawing,ch| 
            new_name = "%s-%s-Q-%03d.dgn" % [lid,factype, starting_number]
            changes = change_steps.fetch(ch, {})
            ch = ch + 1
            starting_number += 1
            result_hash = { template: drawing, new_name: new_name, updates: changes}
            results << result_hash
            
          end
          
          [results,starting_number] 
        end
      end

    end

  end

end


if $0 == __FILE__
  app = Faa::Templates::App.new


  app.add_rco_rack do |r| 
    r.add_channel(freq: 255.4, channel: 1)
  end
  app.add_rco_rack do |r| 
    r.add_channel(freq: 122.2, channel: 1)
    r.add_channel(freq: 122.6, channel: 2)
  end
  app.add_rco_rack do |r| 
    r.add_channel(freq: 121.5, channel: 1)
    r.add_channel(freq: 243, channel: 2)
  end
  app.run(lid: 'BTF', factype: 'RTR', starting_number: 110, dir: 'btf')

end







# drawing.scan_cells_for_text do |t|
#   puts t
# end


# drawing.scan_cells_for_text do |t|
#   if t =~ /{{\s+(\w+)\s+}}/
#   end
# end
